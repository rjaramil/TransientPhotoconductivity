function dispFCFit(fitInfo)

% function dispFCFit(fitInfo)
%
% Displays transient free carrier absorption data and fit. Uses output from
% plentyOfRope.m.
%
% fitInfo = structure generated by plentyOfRope.m. The fields used here
% are:
%
%   fitInfo.POut = best fit parameters. Array size is fixed, but the
%   parameters depend on the choice of pump:
%       Delta:      POut = [tau, SRV, thick, alpha, R, difu, N, NaN,   NaN, h, xShift, yShift]
%       Square:     POut = [tau, SRV, thick, alpha, R, difu, N, NaN,   T,   h, xShift, yShift]
%       Gaussian:   POut = [tau, SRV, thick, alpha, R, difu, N, sigma, T,   h, xShift, yShift]
%   
%   fitInfo.model = fit model produced by fitnlm.m, which is called by
%   fitFC.m
%
%   fitInfo.pumpProfile = string describing the pump model. Can be 'Delta',
%   'Square', or 'Gaussian'
%
%   fitInfo.solver = string describing which solver was used to model the
%   data. Can be 'Analytical' or 'Numerical'

%   fitInfo.injDep = structure describing the injection dependence of the
%   model used
%
%   fitInfo.x, fitInfo.y = (x, y) data that was fit by fitFC.m. This is the
%   raw data and does not include any scaling or translations

%   fitInfo.dataScale = cell array describing whether the data is scaled by
%   the mobility during the fit
%
% Modified from dispLukeFit.m, July 2015 - R Jaramillo

P           = fitInfo.POut;
% best-fit parameters
yModel      = fitInfo.Fitted;
% model at best-fit parameters
pumpProfile = fitInfo.pumpProfile;
solver      = fitInfo.solver;
injDep      = fitInfo.injDep;
% injection dependence

x           = fitInfo.x;
y           = fitInfo.y;
dataXShift  = P(11); 
dataYShift  = P(12);
dataScale   = fitInfo.dataScale;
% data and data scaling

x           = x + dataXShift;
% apply x shift

if dataScale{1}
    scFun = dataScale{2}/P(6);
    y = y*scFun + dataYShift;
    yModel = yModel*scFun + dataYShift;
else
    y = y + dataYShift;
    yModel = yModel + dataYShift;
end
% apply y shift. and y scaling. Need to apply to both data and model

f_ = figure('Position', [200 100 718 462], 'name', 'display FC fit');
set(f_, 'UserData', fitInfo);
a_ = axes('Units', 'normalized', 'position', [.08 .11 .4 .8]);
hold(a_,'all');

plot(x, y, 'r.', 'displayname', fitInfo.datasetName);
plot(x, yModel, 'k-', 'displayname', 'model');

xlabel('time (ns)')
ylabel('\Deltan (cm^{-3})')
box on
grid on
legend show

% Report results in a table:
t_ = uitable('parent', f_);
set(t_, 'ColumnName', {'Parameter' 'Fit?' 'Value' '95% CI'});
set(t_, 'ColumnFormat', {'char' 'logical' 'numeric' 'numeric'});
set(t_, 'Units', 'Pixels', 'Position', [362 63 352 266]);
set(t_, 'FontSize', 10, 'RowName', []);
set(t_, 'ColumnWidth', {100 50 100 100});
rowNames = {'tau (ns)'; 'S (cm/s)'; 'd (um)'; 'alpha (1/cm)'; 'R (0-1)';...
    'D (cm^2/s)'; 'N (1/cm^2)'; 'sigma (ns)'; 'T (ns)'; 'h (1/cm)'; ...
    'xShift (ns)'; 'yShift (1/um^3)'};
colFit = zeros(size(rowNames)); colParams = colFit; colSE = colFit;
colFit(1:7)         = ~fitInfo.fix(1:7); 
colParams(1:7)      = fitInfo.POut(1:7);
colSE(1:7)          = fitInfo.SEOut(1:7);
% first 7 parameters are the same for all 3 models
colFit(10:12)       = ~fitInfo.fix(10:12);
colParams(10:12)    = fitInfo.POut(10:12);
colSE(10:12)        = fitInfo.SEOut(10:12);
% last 3 parameters are the same for all 3 models (h, xShift, yShift)
switch fitInfo.pumpProfile
    case 'Delta'
        colFit(8)       = 0;
        colFit(9)       = 0;
        colParams(8)    = NaN;
        colParams(9)    = NaN;
        colSE(8)        = NaN;
        colSE(9)        = NaN;
    case 'Square'
        colFit(8)       = 0;
        colFit(9)       = ~fitInfo.fix(8);
        colParams(8)    = NaN;
        colParams(9)    = fitInfo.POut(8);
        colSE(8)        = NaN;
        colSE(9)        = fitInfo.SEOut(8);
    case 'Gaussian'
        colFit(8)       = ~fitInfo.fix(8);
        colFit(9)       = ~fitInfo.fix(9);
        colParams(8)    = fitInfo.POut(8); 
        colParams(9)    = fitInfo.POut(9);
        colSE(8)        = fitInfo.SEOut(8);
        colSE(9)        = fitInfo.SEOut(9);
end
colFit = logical(colFit);
% second column is logical (fit?)
colData = cell(12,1);
for i = 1:length(rowNames)
   colData{i,1} = rowNames{i};
   colData{i,2} = colFit(i);
   colData{i,3} = colParams(i);
   colData{i,4} = colSE(i);
   if ~colFit(i) & isnan(colSE(i))
       colData{i,4} = [];
   end
   % If the param was not fit, just leave SE entry blank rather than NaN
end
set(t_,'Data',colData);
ann_ = annotation(f_, 'textbox', 'Units', 'Normalized', 'Position', ...
    [.5 .75 .49 .15], 'EdgeColor', [0 .5 0], 'FontSize', 12, 'tag', ...
    'BestFitAnnotation', 'Color', 'r', 'String', ...
    ['pump = ' pumpProfile ', solver = ' solver char(10)...
    'scale data by mobility = ' num2str(dataScale{1}) char(10)...
    'tauModel = ' injDep.tauModel ', difuModel = ' injDep.difuModel]);

covarPairPlots(fitInfo);

end

